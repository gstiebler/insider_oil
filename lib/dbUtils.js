"use strict";

var db  = require('../db/models');
var DataSources = require('./DataSources');
var dsParams = require('./DataSourcesParams');


function getDataSource(dataSourceName) {
    var model = db[dataSourceName];
    if(model)
        return model;
    else {
        return createDataSource(dataSourceName);
    }
}


exports.findAllCustom = function(model, options, filters) {
    options = options ? options : {};
    filters = filters ? filters : {};
    options.where = options.where ? options.where : {};
    options.include = [{all: true}];
    options.where = Object.assign(options.where, filters);
    return model.findAll(options);
}


function simplifyItem(model, item) {
    for( var associationName in model.associations ) {
        const association = model.associations[associationName];
        for( var att in association.target.attributes ) {
            if(att == 'id') continue;
            const fieldName = association.as + '_' + att;
            item.dataValues[fieldName] = item[association.as][att];
        }
    }
}


exports.getModelFields = function(modelName) {
    var dataSource = getDataSource(modelName);
    var viewParams = dsParams[dataSource.name];
    var fields = {};
    for(var attributeName in dataSource.attributes) {
        if(dataSource.attributes[attributeName]._autoGenerated) continue;
        
        const att = viewParams.fields[attributeName];
        if(!att) continue;
        fields[attributeName] = {
            label: att.label,
            type: dataSource.attributes[attributeName].type.toString()
        };
    }
    
    for( var associationName in dataSource.associations ) {
        const association = dataSource.associations[associationName];
        const fieldName = association.identifierField;
        const att = viewParams.fields[fieldName];
        fields[fieldName] = {
            label: att.label,
            type: 'ref',
            model: association.target.name,
            association: associationName
        };
    }
    
    var fieldArray = [];
    for( var fieldName in fields ) {
        const obj = fields[fieldName];
        obj.name = fieldName;
        fieldArray.push(obj);
    }
    
    return fieldArray;
}


exports.simplifyArray = function(model, array) {
    for(var i = 0; i < array.length; i++) {
        simplifyItem( model, array[i] );
    }
}


function createDataSource(dataSourceName) {
    var dataSourceParams = DataSources[dataSourceName];
    if(!dataSourceParams)
        return null;
    var dataSource = {
        name: dataSourceParams.modelName,
        create: function(newItemData) {
            for(var filterField in dataSourceParams.filters)
                newItemData[filterField] = dataSourceParams.filters[filterField];
            return dataSourceParams.model.create(newItemData);
        },
        findAll: function(options) {
            options = options ? options : {};
            // filter using the fixed filters
            options.where = Object.assign(options.where, dataSourceParams.filters);
            return dataSourceParams.model.findAll(options);
        },
        findById: function(id) {
            return dataSourceParams.model.findById(id);
        },
        destroy: function(options) {
            return dataSourceParams.model.destroy(options);
        },
        associations: dataSourceParams.model.associations,
        attributes: dataSourceParams.model.attributes
    };
    return dataSource;
}


exports.getDataSource = getDataSource;
exports.simplifyItem = simplifyItem;