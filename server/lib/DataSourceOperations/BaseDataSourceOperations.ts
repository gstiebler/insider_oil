import IDataSourceOperations = require('./IDataSourceOperations');
import dsParams = require('../DataSourcesParams');
import dbUtils = require('../dbUtils');
import { IFieldMap, IField } from '../../../common/Interfaces';
import { fieldTypeStr } from '../ModelUtils';

class DataSourceOperations implements IDataSourceOperations {
    getModelFieldsObj(modelName:string, includeAutogenerated?:boolean):IFieldMap {
        const dataSource = dbUtils.getDataSource(modelName);
        const viewParams = dsParams[dataSource.name];
        const fields:IFieldMap = {};
        for(let attributeName in dataSource.attributes) {
            if(!includeAutogenerated && dataSource.attributes[attributeName]._autoGenerated) continue;
            
            const att = viewParams.fields[attributeName];
            if(!att) continue;
            var typeStr = fieldTypeStr(dataSource.attributes[attributeName]);
            fields[attributeName] = att;
            fields[attributeName].type = typeStr;
            if(dataSource.attributes[attributeName].values)
                fields[attributeName].enumValues = dataSource.attributes[attributeName].values;
        }
        
        for( let associationName in dataSource.associations ) {
            const association = dataSource.associations[associationName];
            if(association.associationType != 'BelongsTo')
                continue;
            const fieldName = association.identifierField;
            const att = viewParams.fields[fieldName];
            if(!att)
                throw 'Modelo ' + modelName + ' não possui configuração para o campo ' + fieldName;
            fields[fieldName] = {
                label: att.label,
                type: 'ref',
                model: association.target.name,
                association: associationName
            };
        }  
        
        return fields;
    }
    
    fieldsObjToArray(fields: any): any[] {
        const fieldArray = [];
        for( let fieldName in fields ) {
            const obj = fields[fieldName];
            obj.name = fieldName;
            fieldArray.push(obj);
        }
        return fieldArray;;
    }
    
    getModelFields(modelName:string, includeAutogenerated?:boolean):IField[] {
        const fieldsObj = this.getModelFieldsObj(modelName, includeAutogenerated);
        return this.fieldsObjToArray(fieldsObj);
    }
    
    addAttributesToRecord(record, attributes, dataSource) {
        for(var attributeName in attributes) {
            const tableAttribute = dataSource.fieldRawAttributesMap[attributeName];
            if(tableAttribute && tableAttribute.invisible) continue;
            record[attributeName] = attributes[attributeName];
        }
    }
    
    recordToViewValues(dataSourceName: string, record): any[] {
        const fields = this.getModelFields(dataSourceName, true);
        const recordValues = [];
        
        for( let item of fields ) {
            item.value = record[item.name];
            
            if(item.type == 'ref') {          
                const viewParams = dsParams[item.model];      
                var labelField = 'name';
                if(viewParams) 
                    labelField = viewParams.labelField;  
                item.ref = true;
                if(record[item.association])
                    item.name = record[item.association][labelField];
            }
            recordValues.push(item);
        }
        
        return recordValues;
    }
}

const obj = new DataSourceOperations();

export = obj;